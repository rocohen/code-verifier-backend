{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"BasicResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "*\r\nBasic JSON response for Controllers"
			},
			"KataLevel": {
				"enum": [
					"Basic",
					"Medium",
					"High"
				],
				"type": "string"
			},
			"IKata": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/KataLevel"
					},
					"intents": {
						"type": "number",
						"format": "double"
					},
					"stars": {
						"type": "number",
						"format": "double"
					},
					"creator": {
						"type": "string"
					},
					"solution": {
						"type": "string"
					},
					"participants": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"description",
					"level",
					"intents",
					"stars",
					"creator",
					"solution",
					"participants"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUser": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"age": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"email",
					"password",
					"age"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAuth": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "code-verifier-backend",
		"version": "1.0.0",
		"description": "Backend Node + Express + TS + Swagger",
		"license": {
			"name": "GPL-3.0"
		},
		"contact": {
			"name": "rocohen"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/hello": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Promise of BasicResponse type",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a \"Hello {name}\" message in JSON",
				"tags": [
					"HelloController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Name of user to be greeted",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "All users or user found by ID",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a list of Users from \"Users\" collection in DB",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Id of user to retrieve (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "message informing if user was deleted successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that deletes a User by ID from \"Users\" collection in DB",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/api/katas": {
			"get": {
				"operationId": "GetKatas",
				"responses": {
					"200": {
						"description": "All katas o kata found by ID",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that retrieves katas from \"Katas\" Collection in DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Id of Kata to retrieve (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateKata",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IKata"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteKata",
				"responses": {
					"200": {
						"description": "message informing if deletion was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to delete the Katas in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of Kata to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateKata",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IKata"
							}
						}
					}
				}
			}
		},
		"/api/auth/register": {
			"post": {
				"operationId": "RegisterUser",
				"responses": {
					"200": {
						"description": "new user created and stored in db",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that registers a new User",
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "user to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUser",
								"description": "user to be created"
							}
						}
					}
				}
			}
		},
		"/api/auth/login": {
			"post": {
				"operationId": "LoginUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IAuth"
							}
						}
					}
				}
			}
		},
		"/api/auth/me": {
			"get": {
				"operationId": "UserData",
				"responses": {
					"200": {
						"description": "User found by ID",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a single User from the \"Users\" Collection in DB\r\nMiddleware: Validate JWT\r\nIn order to work: you should add the x-access-token with a valid JWT in headers",
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to retrieve",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/auth/logout": {
			"post": {
				"operationId": "LogoutUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}