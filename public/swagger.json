{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"BasicResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "*\r\nBasic JSON response for Controllers"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "code-verifier-backend",
		"version": "1.0.0",
		"description": "Backend Node + Express + TS + Swagger",
		"license": {
			"name": "GPL-3.0"
		},
		"contact": {
			"name": "rocohen"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/hello": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Promise of BasicResponse type",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a \"Hello {name}\" message in JSON",
				"tags": [
					"HelloController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Name of user to be greeted",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "All users or user found by ID",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a list of Users from \"Users\" collection in DB",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to retrieve (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "message informing if user was deleted successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that deletes a User by ID from \"Users\" collection in DB",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "message informing if user was created successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that creates a new User",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "data to create a new User",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "data to create a new User"
							}
						}
					}
				}
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "message informing if user was updated successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that updates a User by ID from \"Users\" collection in DB",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to update",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "user data to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "user data to update"
							}
						}
					}
				}
			}
		},
		"/api/katas": {
			"get": {
				"operationId": "GetKatas",
				"responses": {
					"200": {
						"description": "All katas or kata found by ID or Katas by level",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that retrieves a list of Katas from \"Katas\" collection in DB",
				"tags": [
					"KataController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of kata to retrieve (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "level of katas to retrieve (optional)",
						"in": "query",
						"name": "level",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteKata",
				"responses": {
					"200": {
						"description": "message informing if kata was deleted successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that deletes a Kata by ID from \"Katas\" collection in DB",
				"tags": [
					"KataController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of a kata to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateKata",
				"responses": {
					"200": {
						"description": "message informing if kata was created successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to create a new Kata",
				"tags": [
					"KataController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "data to create a new Kata",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "data to create a new Kata"
							}
						}
					}
				}
			},
			"put": {
				"operationId": "UpdateKata",
				"responses": {
					"200": {
						"description": "message informing if kata was updated successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that updates a Kata by ID from \"Katas\" collection in DB",
				"tags": [
					"KataController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of kata to update",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "kata data to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "kata data to update"
							}
						}
					}
				}
			}
		},
		"/api/katas/{id}": {
			"put": {
				"operationId": "RateKata",
				"responses": {
					"200": {
						"description": "message informing if kata was rated successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint that rates a Kata by passing an ID from \"Katas\" collection in DB",
				"tags": [
					"KataController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of kata to rate",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "number to rate a kata",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "number",
								"format": "double",
								"description": "number to rate a kata"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}